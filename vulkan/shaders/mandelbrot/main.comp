#version 460
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 1920
#define HEIGHT 1080
#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

struct Pixel {
	vec4 value;
};

layout(std140, binding = 0) buffer buf
{
	Pixel imageData[];
};

void main()
{
	// OK who made this lmao what the heck
	/*
	In order to fit the work into workgroups, some unnecessary threads are launched.
	We terminate those threads here. 
	*/
	if(gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
	{
		return;
	}

	vec2 uv = 2.0*(vec2(gl_GlobalInvocationID.xy)-0.5*vec2(WIDTH, HEIGHT))/max(float(WIDTH), float(HEIGHT));

	vec2 z = vec2(0.0);
	vec2 c = (uv+vec2(-0.445, 0.0))*2.0;
	float n = 0.0;
	const int M = 128;
	for(int i = 0; i < M; i++)
	{
		// Hey at least they used dot product
		if(dot(z, z) > 2.0)
		{
			break;
		}

		// Iterate the Mandelbrot Set
		z = vec2((z.x*z.x)-(z.y*z.y), 2.0*z.x*z.y)+c;

		n++;
	}

	// https://iquilezles.org/www/articles/palettes/palettes.htm
	float t = float(n)/float(M);
	vec3 d = vec3( 0.3,  0.3,  0.5);
	vec3 e = vec3(-0.2, -0.3, -0.5);
	vec3 f = vec3( 2.1,  2.0,  3.0);
	vec3 g = vec3( 0.0,  0.1,  0.0);
	vec4 color = vec4(d+e*cos(6.28318*(f*t+g)), 1.0);

	// store the rendered mandelbrot set into a storage buffer:
	imageData[WIDTH*gl_GlobalInvocationID.y+gl_GlobalInvocationID.x].value = color;
}