#version 460
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 640
#define HEIGHT 360
#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

struct Pixel {
	vec4 value;
};

layout(std140, binding = 0) buffer buf
{
	Pixel imageData[];
};

// ##### Parameters #####

// Camera Field of View
#define camfov 1.0

// Image Exposure
#define exposure 1.0

// ##### Constants #####

// http://www.mimirgames.com/articles/programming/digits-of-pi-needed-for-floating-point-numbers/
#define pi 3.141592653589793

// ##### Random Number Generator #####

// Random Number Generator Seed
uint ns;

// Triple32: https://nullprogram.com/blog/2018/07/31/
uint triple32(uint x)
{
	x ^= x >> 17U;
	x *= 0xED5AD4BBU;
	x ^= x >> 11U;
	x *= 0xAC4C1B51U;
	x ^= x >> 15U;
	x *= 0x31848BABU;
	x ^= x >> 14U;
	return x;
}

// Random Number (between 0.0 and 1.0)
float rand()
{
	ns = triple32(ns);
	return float(ns)/float(0xFFFFFFFFU);
}

// Random Vectors
vec2 rand2(){return vec2(rand (), rand());}
vec3 rand3(){return vec3(rand2(), rand());}
vec4 rand4(){return vec4(rand3(), rand());}

// See michael0884's usage of PCG Random
// https://www.shadertoy.com/view/wltcRS
// https://www.shadertoy.com/view/WttyWX

// Normalized Random Vectors
vec2 nrand2(float sigma, vec2 mean)
{
	vec2 z = rand2();
	return mean+sigma*sqrt(-2.0*log(z.x   ))*vec2(cos(2.0*pi*z.y), sin(2.0*pi*z.y));
}

vec3 nrand3(float sigma, vec3 mean)
{
	vec4 z = rand4();
	return mean+sigma*sqrt(-2.0*log(z.xxy ))*vec3(cos(2.0*pi*z.z), sin(2.0*pi*z.z), cos(2.0*pi*z.w));
}

vec4 nrand4(float sigma, vec4 mean)
{
	vec4 z = rand4();
	return mean+sigma*sqrt(-2.0*log(z.xxyy))*vec4(cos(2.0*pi*z.z), sin(2.0*pi*z.z), cos(2.0*pi*z.w), sin(2.0*pi*z.w));
}

// Uniform Random Direction
vec2 udir2()
{
	float z = 2.0*pi*rand();
	return vec2(sin(z), cos(z));
}

vec3 udir3()
{
	vec2 z = rand2();
	vec2 r = vec2(2.0*pi*z.x, acos(2.0*z.y-1.0));
	vec2 s = sin(r), c = cos(r);
	return vec3(c.x*s.y, s.x*s.y, c.y);
}

// ##### Rendering #####

#define hitDist 0.001

// Scene Distance Estimator
float DE(vec3 pos)
{
	// Transform the SDF (and dither the position to remove weird artifacts)
	//pos = (vec3(-0.2, 0.2, 1.2)+nrand3(hitDist, pos)).xzy;

	// Soft Edges
	//pos = nrand3(0.0003, pos);

	// Set-Up Variables
	pos = pos.xzy;
	vec3 z = pos;
	float dr = 1.0;
	float r = 0.0;

	// Iterate Mandelbulb
	for(uint i = 0U; i < 32U; i++)
	{
		r = length(z);

		// Bailout
		if(r > 4.0)
		{
			break;
		}

		// Iterate the Mandelbulb
		float theta = acos(z.z/r)*8.0;
		float phi = atan(z.y, z.x)*8.0;
		dr = r*r*r*r*r*r*r*8.0*dr+1.0;
		z = r*r*r*r*r*r*r*r*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
		z += pos;
	}

	// Return the Distance Estimate
	return 0.5*log(r)*r/dr;
}

// SDF Tetrahedron Numerical Normals
vec3 sampleNormal(vec3 pos)
{
	const vec2 k = vec2(-1.0, 1.0);
	return normalize(
	k.xxx*DE(pos+k.xxx*hitDist)+
	k.xyy*DE(pos+k.xyy*hitDist)+
	k.yxy*DE(pos+k.yxy*hitDist)+
	k.yyx*DE(pos+k.yyx*hitDist));
}

// Ray-Tracing/Ray-Marching
float trace(in vec3 ro, in vec3 rd, out vec3 normal)
{
	// Set-Up Variables
	float t = 0.0;

	// Ray-Marching
	for(uint i = 0U; i < 1024U; i++)
	{
		//
		if(t > 16.0)
		{
			return -1.0;
		}

		//
		float td = DE(ro+rd*t);

		//
		if(td < hitDist)
		{
			normal = sampleNormal(ro+rd*t);
			return t;
		}

		// March the Ray
		t += td;
	}

	// No Intersection
	return -1.0;
}

// Light Transport
vec3 radiance(vec3 ro, vec3 rd)
{
	vec3 normal;
	float t = trace(ro, rd, normal);
	if(t < 0.0)
	{
		return vec3(1.0);
	}

	vec3 wo = normalize(nrand3(0.5, normal));

	vec3 normal0;
	float t0 = trace(ro+rd*(t-hitDist), wo, normal0);
	if(t0 < 0.0 || t0 > tan(rand()*pi*0.5))
	{
		return vec3(1.0);
	}

	return vec3(atan(t0));
}

void main()
{
	// OK who made this lmao what the heck, someone please manage threads better
	/*
	In order to fit the work into workgroups, some unnecessary threads are launched.
	We terminate those threads here. 
	*/
	if(gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
	{
		return;
	}

	vec2 resolution = vec2(WIDTH, HEIGHT);
	vec2 pixelCoord = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

	// Initialize Random Number Generator
	ns = uint(gl_GlobalInvocationID.x)+uint(gl_GlobalInvocationID.y)*uint(resolution.x);

	vec3 pixelColor = vec3(0.0);
	int samples = 0;

	for(int i = 0; i < 8; i++)
	{
		// Image UV Coordinates
		vec2 uv = 2.0*(nrand2(0.5, pixelCoord.xy)-0.5*resolution.xy)/max(resolution.x, resolution.y);
		//temporary fix for upside-down image
		uv = vec2(uv.x, -uv.y);

		// Set-Up Camera
		const vec3 ro = vec3(0.0, 0.0, 2.0);
		const mat3 rotmat = mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		vec3 rd = normalize(vec3(camfov*uv, -1.0)*rotmat);

		// Render the Sample
		pixelColor += clamp(radiance(ro, rd), 0.0, 1.0);
		samples++;
	}

	// HDR Tonemapping
	//vec3 color = clamp(1.0-exp(-max(pixelColor/float(nsamples), 0.0)*exposure), 0.0, 1.0);
	vec3 color = pow(pixelColor/float(samples), vec3(1.0/2.2));

	// Output the Rendered Sample
	imageData[WIDTH*gl_GlobalInvocationID.y+gl_GlobalInvocationID.x].value = vec4(color, 1.0);
}